---
- hosts: servers
  vars:
    sonarqube_port: 9000
    sonarqube_user_admin: "admin"
    sonarqube_default_password: "admin"
    sonarqube_new_password: "123456"
    sonarqube_project_key: "my_project_new"
    sonarqube_project_name: "My_Project_New"
    sonarqube_token_name: "my_token_new"
    quality_gate_name: "Sonar way"  # Name of the quality gate
  tasks:
    - name: Wait until SonarQube Container is reachable via TCP/IP.
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: "{{ sonarqube_port }}"
        state: started
        delay: 5
        connect_timeout: 15
        timeout: 30
     - name: Change the default SonarQube admin password
       ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/users/change_password"
        method: POST
        user: "{{ sonarqube_user_admin }}"
        password: "{{ sonarqube_default_password }}"  
        force_basic_auth: yes
        body: "login={{ sonarqube_user_admin }}&previousPassword={{ sonarqube_default_password }}&password={{ sonarqube_new_password }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        status_code: [200, 204] 
      register: change_password_response
      until: change_password_response.status in [200, 204]
      retries: 5
      delay: 5
      no_log: true  

    # - name: Check SonarQube to be healthy.
    #   ansible.builtin.uri:
    #     url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/system/health"
    #     user: "{{ sonarqube_user_admin }}"
    #     password: "{{ sonarqube_new_password }}"
    #     method: GET
    #     force_basic_auth: yes
    #   register: response
    #   until: response.status == 200 and response.json.health == 'GREEN'
    #   retries: 20
    #   delay: 5

    - name: Create a new project in SonarQube
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/projects/create?project={{ sonarqube_project_key }}&name={{ sonarqube_project_name | urlencode }}"
        user: "{{ sonarqube_user_admin }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
      register: project_response

    - name: Generate user token
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/user_tokens/generate"
        user: "{{ sonarqube_user_admin }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name={{ sonarqube_token_name }}"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: token_response

    - name: Save token to a file on remote
      ansible.builtin.copy:
        content: "{{ token_response.json.token }}"
        dest: "sonar_token.txt"  # Adjust this path as needed


    - name: Set the default quality gate
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/qualitygates/set_as_default"
        user: "{{ sonarqube_user_admin }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name={{ quality_gate_name | urlencode }}"  # URL-encoded name of the quality gate
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: quality_gate_response
      failed_when: quality_gate_response.status not in [200, 204]  # Allow 204 as a valid response

    - name: Create webhook
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ sonarqube_port }}/api/webhooks/create"
        user: "{{ sonarqube_user_admin }}"
        password: "{{ sonarqube_new_password }}"
        method: POST
        force_basic_auth: yes
        body: "name=My Webhook&project={{ sonarqube_project_key }}&url=http://{{ ansible_host }}:8080/sonarqube-webhook/"
        headers:
          Content-Type: "application/x-www-form-urlencoded"
      register: webhook_response

    - name: Output project creation result
      debug:
        var: project_response

    - name: Output token generation result
      debug:
        var: token_response

    - name: Output quality gate configuration result
      debug:
        var: quality_gate_response

    - name: Output webhook creation result
      debug:
        var: webhook_response