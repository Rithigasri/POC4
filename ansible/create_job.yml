---
- name: Create and Run Jenkins Job for SonarQube Analysis and Deployment
  hosts: servers
  vars:
    jenkins_host: "34.221.197.112"   # Jenkins server IP or hostname
    jenkins_user: "rithi"         # Jenkins user
    jenkins_password: "1143ccec920b9ce2939dfa3ebe86c5e35f"  # Jenkins API token
    job_name: "Job2"      # Name of the job
    job_config: |
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition>
        <description>Pipeline for SonarQube analysis and deployment</description>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
          <script>
            pipeline {
              agent any

              stages {
                stage('Checkout') {
                  steps {
                    git url: "https://github.com/Rithigasri/poc3.git", branch: "main"
                  }
                }
                stage('SonarQube Analysis') {
                  steps {
                    withSonarQubeEnv('SonarQube') {
                      script {
                        // Use Java 17 for SonarScanner
                        def scannerHome = tool name: 'sonar-scanner'
                        sh """
                        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
                        export PATH=\$JAVA_HOME/bin:\$PATH
                        ${scannerHome}/sonar-scanner \
                        -Dsonar.projectKey=poc \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://34.221.197.112:9000 \
                        -Dsonar.login=sqp_51ddbf3421dd6644f063604a35942cf553d370ca
                        """
                      }
                    }
                  }
                }
                stage('Check SonarQube Task Status') {
                  steps {
                    script {
                      dir('.scannerwork') {
                        def ceTaskId = sh(script: "grep 'ceTaskId' report-task.txt | cut -d'=' -f2", returnStdout: true).trim()
                        def taskStatus = sh(script: "curl -u admin:123456 http://34.221.197.112:9000/api/ce/task?id=${ceTaskId}", returnStdout: true).trim()
                        if (taskStatus.contains('"status":"FAILED"')) {
                          error "SonarQube analysis failed!"
                        } else if (taskStatus.contains('"status":"SUCCESS"')) {
                          echo "SonarQube analysis passed!"
                        } else {
                          echo "SonarQube analysis is still in progress."
                        }
                      }
                    }
                  }
                }
                stage('Deploy Static Website') {
                  steps {
                    script {
                      // Copy static website files to Apache document root
                      sh 'sudo cp -r * /var/www/html/'
                      echo "Deployment to Apache completed successfully."
                    }
                  }
                }
              }
              post {
                success {
                  echo 'Pipeline completed successfully!'
                }
                failure {
                  echo 'Pipeline failed.'
                }
              }
            }
          </script>
        </definition>
      </flow-definition>

  tasks:
    - name: Get Jenkins Crumb
      uri:
        url: "http://{{ jenkins_host }}:8080/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        return_content: yes
      register: jenkins_crumb

    - name: Create Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/createItem?name={{ job_name }}"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/xml"
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        body: "{{ job_config }}"
        status_code: 200

    - name: Build Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/build"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        status_code: 201

    - name: Update Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/config.xml"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/xml"
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        body: "{{ job_config }}"
        status_code: 200

    - name: Verify Job Status
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/lastBuild/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        return_content: yes
      register: job_status

    - debug:
        var: job_status