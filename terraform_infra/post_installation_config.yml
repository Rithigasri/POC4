---
- name: Manage Jenkins Plugins
  hosts: servers
  become: true  # Add this line to escalate privileges
  vars:
    jenkins_host: "52.32.81.91"  # Jenkins server IP or hostname
    jenkins_user: "rithi"         # Jenkins user
    jenkins_password: "116351172da2a9371de0720e1062a9dc52"  # Jenkins API token
    jenkins_plugins:
      sonar:
        version: "latest"
      git-server:
        version: "latest"
        enabled: true

  tasks:
    - name: Install required Jenkins plugins
      community.general.jenkins_plugin:
        name: "{{ item.key }}"
        version: "{{ item.value.version | default(omit) }}"
        state: latest
        url: "http://{{ jenkins_host }}:8080"
        url_username: "{{ jenkins_user }}"
        url_password: "{{ jenkins_password }}"
      with_dict: "{{ jenkins_plugins }}"
      register: installed_plugins

    - name: Check if restart is required by any of the plugins
      set_fact:
        jenkins_restart_required: true
      when: item.changed
      with_items: "{{ installed_plugins.results }}"

    - name: Restart Jenkins if required
      ansible.builtin.service:
        name: jenkins
        state: restarted
      when: jenkins_restart_required

    - name: Wait for Jenkins to start up
      ansible.builtin.uri:
        url: "http://{{ jenkins_host }}:8080"
        status_code: 200
        timeout: 5
      register: jenkins_service_status
      retries: 60
      delay: 5
      until: >
        'status' in jenkins_service_status and
        jenkins_service_status['status'] == 200
      when: jenkins_restart_required

---
- name: Add SonarQube token to Jenkins
  hosts: servers
  vars:
    jenkins_host: "52.32.81.91"   # Jenkins server IP or hostname
    jenkins_user: "rithi"         # Jenkins user
    jenkins_password: "116351172da2a9371de0720e1062a9dc52"  # Jenkins API token
    sonar_token: "sqp_17f617f7258421ceee78e8758947b7937ab35321"  # SonarQube token

  tasks:
    - name: Get Jenkins Crumb
      uri:
        url: "http://{{ jenkins_host }}:8080/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        return_content: yes
      register: jenkins_crumb

    - name: Add SonarQube token to Jenkins credentials store
      uri:
        url: "http://{{ jenkins_host }}:8080/manage/credentials/store/system/domain/_/createCredentials"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        follow_redirects: all  # This allows following redirects
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        body: "json={{ {'': '0', 'credentials': { 'scope': 'GLOBAL', 'id': 'sonarqube-token', 'secret': sonar_token, 'description': 'SonarQube Token', '$class': 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl' }} | to_json | urlencode }}"

---
- name: Create and Run Jenkins Job for SonarQube Analysis and Deployment
  hosts: servers
  vars:
    jenkins_host: "52.32.81.91"   # Jenkins server IP or hostname
    jenkins_user: "rithi"         # Jenkins user
    jenkins_password: "116351172da2a9371de0720e1062a9dc52"  # Jenkins API token
    job_name: "Job2"              # Name of the job
    job_config: |
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition>
        <description>Pipeline for SonarQube analysis and deployment</description>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
          <script>
            pipeline {
              agent any

              stages {
                stage('Checkout') {
                  steps {
                    git url: "https://github.com/Rithigasri/poc3.git", branch: "main"
                  }
                }
                stage('SonarQube Analysis') {
                  steps {
                    withSonarQubeEnv('SonarQube') {
                      script {
                        // Use Java 17 for SonarScanner
                        def scannerHome = tool name: 'sonar-scanner'
                        sh """
                        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
                        export PATH=\$JAVA_HOME/bin:\$PATH
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=poc \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://52.32.81.91:9000
                        """
                      }
                    }
                  }
                }
                stage('Check SonarQube Task Status') {
                  steps {
                    script {
                      dir('.scannerwork') {
                        def ceTaskId = sh(script: "grep 'ceTaskId' report-task.txt | cut -d'=' -f2", returnStdout: true).trim()
                        def taskStatus = sh(script: "curl -u admin:sonar http://52.32.81.91:9000/api/ce/task?id=${ceTaskId}", returnStdout: true).trim()
                        if (taskStatus.contains('"status":"FAILED"')) {
                          error "SonarQube analysis failed!"
                        } else if (taskStatus.contains('"status":"SUCCESS"')) {
                          echo "SonarQube analysis passed!"
                        } else {
                          echo "SonarQube analysis is still in progress."
                        }
                      }
                    }
                  }
                }
                stage('Deploy Static Website') {
                  steps {
                    script {
                      // Copy static website files to Apache document root
                      sh 'cp -r dist/* /var/www/html/'
                    }
                  }
                }
                stage('Wait for Script Approval') {
                  steps {
                    script {
                      echo 'Waiting for script approval...'
                      sleep 30 // Adjust the time as needed
                    }
                  }
                }
              }
              post {
                success {
                  echo 'Pipeline completed successfully!'
                }
                failure {
                  echo 'Pipeline failed.'
                }
              }
            }
          </script>
        </definition>
      </flow-definition>

  tasks:
    - name: Get Jenkins Crumb
      uri:
        url: "http://{{ jenkins_host }}:8080/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        return_content: yes
      register: jenkins_crumb

    - name: Create Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/createItem?name={{ job_name }}"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/xml"
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        body: "{{ job_config }}"
        status_code: 200

    - name: Build Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/build"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        status_code: 201

    - name: Update Jenkins Job
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/config.xml"
        method: POST
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/xml"
          Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
        body: "{{ job_config }}"
        status_code: 200

    - name: Verify Job Status
      uri:
        url: "http://{{ jenkins_host }}:8080/job/{{ job_name }}/lastBuild/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        return_content: yes
      register: job_status

    - debug:
        var: job_status
